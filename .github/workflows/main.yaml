name: Main

on:
  push:
    branches:
      - main  

  # Manually trigger the workflow
  workflow_dispatch:

jobs:
  get-branch-name:
    runs-on: ubuntu-latest
    outputs:
      last_pr_branch: ${{ steps.get-branch.outputs.last_pr_branch }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GIT_TOKEN }}" | gh auth login --with-token 


      - name: Get the branch name of the last merged PR
        id: get-branch
        run: |
          last_pr_merge_commit=$(git log --merges --pretty=format:"%H" -n 1)
          merge_message=$(git log -1 --pretty=%B $last_pr_merge_commit)
          full_branch_name=$(echo "$merge_message" | grep -oP 'from \K[^/]+/[^\s]+$')
          branch_name=$(echo "$full_branch_name" | awk -F'/' '{print $2}')
          echo "The branch name is $branch_name & full name is $full_branch_name"
          echo "::set-output name=last_pr_branch::$(echo $branch_name | xargs)"

  lint:
    uses: nuxeo/nuxeo-admin-console-ui/.github/workflows/lint.yaml@main
    secrets:
      NPM_PACKAGES_TOKEN: ${{ secrets.NPM_PACKAGES_TOKEN }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }} 

  test:
    uses: nuxeo/nuxeo-admin-console-ui/.github/workflows/utest.yaml@main
    secrets:
      NPM_PACKAGES_TOKEN: ${{ secrets.NPM_PACKAGES_TOKEN }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }} 

  hotfix-merge:
    needs: [get-branch-name]
    if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - run: git config user.name "rakeshkumar1019" && git config user.email "srakeshkumar1019@gmail.com"

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GIT_TOKEN }}" | gh auth login --with-token 
      
      - name: Debug Output
        run: |
            echo "Branch name: ${{ needs.get-branch-name.outputs.last_pr_branch }}"

      - name: Get latest beta tag
        run: |
          git fetch  origin --tags
          latest_beta_tag=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | grep -E '^v23\.[0-9]+\.[0-9]+-beta\.[0-9]+$' | head -n 1 | sed 's/^v//')
          echo "Latest beta tag: $latest_beta_tag"
          echo "LATEST_BETA_TAG=$latest_beta_tag" >> $GITHUB_ENV

      - name: Update beta version
        run: |
            # Increment beta.x to x+1 while preserving the correct format
            BASE_VERSION=$(echo $LATEST_BETA_TAG | sed 's/-beta.*//')
            BETA_NUMBER=$(echo $LATEST_BETA_TAG | sed 's/.*-beta.//')
            NEW_BETA_NUMBER=$((BETA_NUMBER + 1))
            NEW_BETA_TAG="${BASE_VERSION}-beta.${NEW_BETA_NUMBER}"
            echo "New beta tag: $NEW_BETA_TAG"
            echo "NEW_BETA_TAG=$NEW_BETA_TAG" >> $GITHUB_ENV

      - name: Store Beta Release Version as a Secret
        run: |
           gh secret set BETA_RELEASE_VERSION --body ${{ env.NEW_BETA_TAG }}
           echo "::set-output name=version::$VERSION"

      - name: Create Pull Request
        run: |
          gh pr create --base dev --head main --title "HF: Merge main into dev" --body "### This pull request merges the latest changes from the **main** branch into the **dev** branch."
  build:
    needs: [get-branch-name,lint,test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - run: git config user.name "rakeshkumar1019" && git config user.email "srakeshkumar1019@gmail.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: ${{ env.NEXUS_URL }}
          scope: '@nuxeo'

      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 'Update settings.xml with server configuration'
        run: |
          echo '<settings>
              <servers>
                <server>
                  <id>maven-internal</id>
                  <username>${{ secrets.PACKAGES_AUTH_USER }}</username>
                  <password>${{ secrets.PACKAGES_AUTH_TOKEN }}</password>
                </server>
              </servers>
              </settings>' > ~/.m2/settings.xml

      - name: Configure .npmrc
        working-directory: nuxeo-admin-console-web/angular-app
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GIT_TOKEN }}" >> .npmrc

      - name: Prepare Environment
        run: |
          echo "BRANCH_NAME=${GITHUB_HEAD_REF##*/}" >> $GITHUB_ENV
          pushd nuxeo-admin-console-web/angular-app
          echo $(npx -c 'echo "$npm_package_version"')
          echo "PACKAGE_VERSION=$(npx -c 'echo "$npm_package_version"')" >> $GITHUB_ENV 
          popd

      - name: Use Version from Hotfix
        run: |
          VERSION=${{ needs.hotfix.outputs.version }}
          echo "The version is $VERSION"
          echo "Deploying version $VERSION to production..."

          
      - name: Get Prerelease Version
        run: |
          echo "VERSION=${{ secrets.BETA_RELEASE_VERSION }}" >> $GITHUB_ENV 

      - name: Print Unmasked Version
        run: |
          echo "Unmasking VERSION"
          echo "${{ secrets.BETA_RELEASE_VERSION }}" | tee unmasked_version.txt
          cat unmasked_version.txt
          
      - name: Update Version ${{env.VERSION}}
        run: |
          # find . -type f -not -path "./node_modules/*" -regex ".*\.\(yaml\|sample\|json\)" -exec sed -i 's/'"${{env.PACKAGE_VERSION}}"'/'"${{env.VERSION}}"'/g' {} \;
          # set padded version to build package for connect preprod
          PADDED=$(printf '%03d' $(echo ${{env.VERSION}} | sed -r s/[0-9]+\.[0-9]+\.[0-9]+-beta\.\([0-9]+\)/\\1/g))
          PADDED_VERSION=$(echo ${{env.VERSION}} | sed -E "s/([0-9]+\.[0-9]+\.[0-9]+-beta\.)[0-9]+/\\1$PADDED/g")
          echo "PADDED_VERSION=$PADDED_VERSION" >> $GITHUB_ENV
          find . -type f -not -path "./node_modules/*" -regex ".*\.\(xml\)" -exec sed -i 's/'"${{env.PACKAGE_VERSION}}"'/'"$PADDED_VERSION"'/g' {} \;
          sed -i -e 's/\${project.version}/'"$PADDED_VERSION"'/g' nuxeo-admin-console-package/pom.xml
          pushd nuxeo-admin-console-web/angular-app
          npm version ${{env.VERSION}} --no-git-tag-version
          popd
         
      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Install Dependencies
        working-directory: nuxeo-admin-console-web/angular-app
        run: npm install

      - name: Restore Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: Build Angular Project
        run: mvn package

      - name: Save Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: Archive Package
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            nuxeo-admin-console-package/target/nuxeo-admin-console-test-*.zip

      - name: Delete & Update .npmrc 
        working-directory: nuxeo-admin-console-web/angular-app
        run: |
          rm .npmrc
          echo "
          @hylandsoftware:registry=https://npm.pkg.github.com
          @nuxeo:registry=https://packages.nuxeo.com/repository/npm-public
          registry=https://registry.npmjs.org/
          " >> .npmrc

      - name: Tag
        run: |
          git add nuxeo-admin-console-web/angular-app/package-lock.json
          git commit -a -m "Release ${{env.VERSION}}"
          git tag -a v${{env.VERSION}} -m "Release ${{env.VERSION}}"
          git push origin v${{env.VERSION}}
        
      - name: Publish on Pre-Prod Marketplace
        working-directory: nuxeo-admin-console-package/target
        env:
          CONNECT_PREPROD_URL: https://nos-preprod-connect.nuxeocloud.com/nuxeo
        run: |
          PACKAGE="nuxeo-admin-console-test-${{env.PADDED_VERSION}}.zip"
          STATUS_CODE=`curl -i --silent --output publish-req.output -w "%{http_code}" -u "${{ secrets.CONNECT_PREPROD_AUTH }}" -F package=@$PACKAGE "$CONNECT_PREPROD_URL/site/marketplace/upload?batch=true"`
          cat publish-req.output
          if [[ "$STATUS_CODE" != "200" ]]
          then
            exit 1
          else
            exit 0
          fi

      # - name: Publish on Pre-Prod Marketplace
      #   working-directory: nuxeo-admin-console-package/target
      #   env:
      #     CONNECT_PREPROD_URL: https://nos-preprod-connect.nuxeocloud.com/nuxeo
      #   run: |
      #     PACKAGE="nuxeo-admin-console-${{env.PADDED_VERSION}}.zip"
      #     ls
      #     echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
      #     echo $PACKAGE