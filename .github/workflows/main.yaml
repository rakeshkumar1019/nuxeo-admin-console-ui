name: Main

on:
  push:
    branches:
      - main  

  # Manually trigger the workflow 
  workflow_dispatch:

jobs:
  summary:
    runs-on: ubuntu-latest
    steps:
      - name: Render Markdown
        run: |
          MARKDOWN_CONTENT="
          $(cat << EOF
          # Nuxeo Admin Console UI Workflow

          This GitHub Actions workflow is designed to automate the build and deployment process for the Nuxeo Admin Console UI project.

          ## Workflow Steps:

          1. **Get Branch Name**: The workflow starts by checking out the code and retrieving the name of the last merged pull request branch using the GitHub CLI.

          2. **Lint and Test**: The workflow then runs two separate jobs to lint the code and run unit tests, using shared workflows defined in the `nuxeo/nuxeo-admin-console-ui` repository.

          3. **Hotfix Merge**: If the last merged pull request was not from the `dev` branch, the workflow proceeds to the `hotfix-merge` job. This job checks out the code, sets up the Git configuration, and then gets the latest beta tag. It then increments the beta version number, stores the new beta version as a GitHub secret, and creates a pull request to merge the `main` branch into the `dev` branch.

          4. **Build**: The `build` job is the main part of the workflow. It starts by checking out the code, setting up the Node.js and Java environments, and configuring the Maven settings. It then prepares the environment by setting the branch name and package version, and determines the prerelease version to use based on the output from the `hotfix-merge` job.
            - The workflow updates the version in the project files, installs dependencies, and builds the Angular project using Maven.
            - It then archives the built package as an artifact, deletes and updates the `.npmrc` file, and tags the repository with the new version.
            - Finally, it publishes the package to the Nuxeo pre-production Marketplace.

          Overall, this workflow is designed to automate the build and deployment process for the Nuxeo Admin Console UI project, ensuring that the latest changes are properly tested, versioned, and deployed to the pre-production environment.
          EOF
          )"

          echo "$MARKDOWN_CONTENT" | gh markdown --render-data json | jq -r '.html'

  get-branch-name:
    runs-on: ubuntu-latest
    outputs:
      last_pr_branch: ${{ steps.get-branch.outputs.last_pr_branch }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GIT_TOKEN }}" | gh auth login --with-token 


      - name: Get the branch name of the last merged PR
        id: get-branch
        run: |
          last_pr_merge_commit=$(git log --merges --pretty=format:"%H" -n 1)
          merge_message=$(git log -1 --pretty=%B $last_pr_merge_commit)
          full_branch_name=$(echo "$merge_message" | grep -oP 'from \K[^/]+/[^\s]+$')
          branch_name=$(echo "$full_branch_name" | awk -F'/' '{print $2}')
          echo "The branch name is $branch_name & full name is $full_branch_name"
          echo "::set-output name=last_pr_branch::$(echo $branch_name | xargs)"

  lint:
    uses: nuxeo/nuxeo-admin-console-ui/.github/workflows/lint.yaml@main
    secrets:
      NPM_PACKAGES_TOKEN: ${{ secrets.NPM_PACKAGES_TOKEN }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }} 

  test:
    uses: nuxeo/nuxeo-admin-console-ui/.github/workflows/utest.yaml@main
    secrets:
      NPM_PACKAGES_TOKEN: ${{ secrets.NPM_PACKAGES_TOKEN }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }} 

  hotfix-merge:
    needs: [get-branch-name]
    outputs:
      hotfix_beta_version: ${{ steps.get-hotfix-beta-version.outputs.hotfix_beta_version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        uses: actions/checkout@v4

      - name: Setup Git config
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        run: git config user.name "rakeshkumar1019" && git config user.email "srakeshkumar1019@gmail.com"

      - name: Authenticate GitHub CLI
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        run: |
          echo "${{ secrets.GIT_TOKEN }}" | gh auth login --with-token 
      
      - name: Debug Output
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        run: |
            echo "Branch name: ${{ needs.get-branch-name.outputs.last_pr_branch }}"

      - name: Get latest beta tag
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        run: |
          git fetch  origin --tags
          latest_beta_tag=$(git for-each-ref --sort=-taggerdate --format '%(refname:short)' refs/tags | grep -E '^v23\.[0-9]+\.[0-9]+-beta\.[0-9]+$' | head -n 1 | sed 's/^v//')
          echo "Latest beta tag: $latest_beta_tag"
          echo "LATEST_BETA_TAG=$latest_beta_tag" >> $GITHUB_ENV

      - name: Update beta version
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        run: |
            # Increment beta.x to x+1 while preserving the correct format
            BASE_VERSION=$(echo $LATEST_BETA_TAG | sed 's/-beta.*//')
            BETA_NUMBER=$(echo $LATEST_BETA_TAG | sed 's/.*-beta.//')
            NEW_BETA_NUMBER=$((BETA_NUMBER + 1))
            NEW_BETA_TAG="${BASE_VERSION}-beta.${NEW_BETA_NUMBER}"
            echo "New beta tag: $NEW_BETA_TAG"
            echo "NEW_BETA_TAG=$NEW_BETA_TAG" >> $GITHUB_ENV

# Using set-output to ensure we have the latest value for hotfix_beta_version.
      - name: Store Beta Release Version as a Secret
        id: get-hotfix-beta-version
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        run: |
          gh secret set BETA_RELEASE_VERSION --body ${{ env.NEW_BETA_TAG }}
          echo "hotfix_beta_version=${{ env.NEW_BETA_TAG }}" >> $GITHUB_ENV
          echo "::set-output name=hotfix_beta_version::${{ env.NEW_BETA_TAG }}"

      - name: Create Pull Request
        if: needs.get-branch-name.outputs.last_pr_branch != 'dev'
        run: |
          gh pr create --base dev --head main --title "HF: Merge main into dev" --body "### This pull request merges the latest changes from the **main** branch into the **dev** branch."
  build:
    needs: [get-branch-name,lint,test,hotfix-merge]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - run: git config user.name "rakeshkumar1019" && git config user.email "srakeshkumar1019@gmail.com"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: ${{ env.NEXUS_URL }}
          scope: '@nuxeo'

      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 'Update settings.xml with server configuration'
        run: |
          echo '<settings>
              <servers>
                <server>
                  <id>maven-internal</id>
                  <username>${{ secrets.PACKAGES_AUTH_USER }}</username>
                  <password>${{ secrets.PACKAGES_AUTH_TOKEN }}</password>
                </server>
              </servers>
              </settings>' > ~/.m2/settings.xml

      - name: Configure .npmrc
        working-directory: nuxeo-admin-console-web/angular-app
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GIT_TOKEN }}" >> .npmrc

      - name: Prepare Environment
        run: |
          echo "BRANCH_NAME=${GITHUB_HEAD_REF##*/}" >> $GITHUB_ENV
          pushd nuxeo-admin-console-web/angular-app
          echo $(npx -c 'echo "$npm_package_version"')
          echo "PACKAGE_VERSION=$(npx -c 'echo "$npm_package_version"')" >> $GITHUB_ENV 
          popd

      - name: Get Prerelease Version
        run: |
          echo "Beta Release Version"
          echo ${{secrets.BETA_RELEASE_VERSION}} | sed 's/./& /g'
          if [[ -n "${{ needs.hotfix-merge.outputs.hotfix_beta_version }}" ]]; then
            echo "VERSION=${{ needs.hotfix-merge.outputs.hotfix_beta_version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ secrets.BETA_RELEASE_VERSION }}" >> $GITHUB_ENV
          fi


          
      - name: Update Version ${{env.VERSION}}
        run: |
          # find . -type f -not -path "./node_modules/*" -regex ".*\.\(yaml\|sample\|json\)" -exec sed -i 's/'"${{env.PACKAGE_VERSION}}"'/'"${{env.VERSION}}"'/g' {} \;
          # set padded version to build package for connect preprod
          PADDED=$(printf '%03d' $(echo ${{env.VERSION}} | sed -r s/[0-9]+\.[0-9]+\.[0-9]+-beta\.\([0-9]+\)/\\1/g))
          PADDED_VERSION=$(echo ${{env.VERSION}} | sed -E "s/([0-9]+\.[0-9]+\.[0-9]+-beta\.)[0-9]+/\\1$PADDED/g")
          echo "PADDED_VERSION=$PADDED_VERSION" >> $GITHUB_ENV
          find . -type f -not -path "./node_modules/*" -regex ".*\.\(xml\)" -exec sed -i 's/'"${{env.PACKAGE_VERSION}}"'/'"$PADDED_VERSION"'/g' {} \;
          sed -i -e 's/\${project.version}/'"$PADDED_VERSION"'/g' nuxeo-admin-console-package/pom.xml
          pushd nuxeo-admin-console-web/angular-app
          npm version ${{env.VERSION}} --no-git-tag-version
          popd
         
      - name: Install Angular CLI
        run: npm install -g @angular/cli

      - name: Install Dependencies
        working-directory: nuxeo-admin-console-web/angular-app
        run: npm install

      - name: Restore Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: restore

      - name: Build Angular Project
        run: mvn package

      - name: Save Maven cache
        uses: skjolber/maven-cache-github-action@v1
        with:
          step: save

      - name: Archive Package
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            nuxeo-admin-console-package/target/nuxeo-admin-console-test-*.zip

      - name: Delete & Update .npmrc 
        working-directory: nuxeo-admin-console-web/angular-app
        run: |
          rm .npmrc
          echo "
          @hylandsoftware:registry=https://npm.pkg.github.com
          @nuxeo:registry=https://packages.nuxeo.com/repository/npm-public
          registry=https://registry.npmjs.org/
          " >> .npmrc

      - name: Tag
        run: |
          git add nuxeo-admin-console-web/angular-app/package-lock.json
          git commit -a -m "Release ${{env.VERSION}}"
          git tag -a v${{env.VERSION}} -m "Release ${{env.VERSION}}"
          git push origin v${{env.VERSION}}
        
      - name: Publish on Pre-Prod Marketplace
        working-directory: nuxeo-admin-console-package/target
        env:
          CONNECT_PREPROD_URL: https://nos-preprod-connect.nuxeocloud.com/nuxeo
        run: |
          PACKAGE="nuxeo-admin-console-test-${{env.PADDED_VERSION}}.zip"
          STATUS_CODE=`curl -i --silent --output publish-req.output -w "%{http_code}" -u "${{ secrets.CONNECT_PREPROD_AUTH }}" -F package=@$PACKAGE "$CONNECT_PREPROD_URL/site/marketplace/upload?batch=true"`
          cat publish-req.output
          if [[ "$STATUS_CODE" != "200" ]]
          then
            exit 1
          else
            exit 0
          fi

      # - name: Publish on Pre-Prod Marketplace
      #   working-directory: nuxeo-admin-console-package/target
      #   env:
      #     CONNECT_PREPROD_URL: https://nos-preprod-connect.nuxeocloud.com/nuxeo
      #   run: |
      #     PACKAGE="nuxeo-admin-console-${{env.PADDED_VERSION}}.zip"
      #     ls
      #     echo "PACKAGE=$PACKAGE" >> $GITHUB_ENV
      #     echo $PACKAGE